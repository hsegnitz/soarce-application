{% extends "layout.twig" %}

{%  block head %}
    <title>SOARCE</title>
{%  endblock %}

{%  block header %}
    SOARCE
    <small>// Documentation</small>
{% endblock %}

{% block main %}

    <div class="col-md-3">
        <div class="box box-solid fixed">
            <div class="box-header with-border">
                <i class="fa fa-plug"></i>
                <h3 class="box-title">Plugin</h3>
            </div>

            <div class="box-body">
                <ol>
                    <li><a href="/docs/overview#introduction">Introduction</a></li>
                    <li><a href="/docs/overview#installation">Installation</a></li>
                    <li><a href="/docs/overview#configuration">Configuration</a></li>
                    <li><a href="/docs/overview#debug-interface">Debug Interface</a></li>
                    <li><a href="/docs/overview#known-issues">Known Issues</a></li>
                </ol>
            </div>
        </div>
    </div>
    <div class="col-md-9">
        <div class="box box-solid">
            <div class="box-header with-border">
                <i class="fa fa-plug"></i>
                <h3 class="box-title" id="introduction">Introduction</h3>
            </div>

            <div class="box-body with-border">
                <p>This package is the client part of SOARCE - a tool for collecting, reading and analyzing PHP code coverage
                    withing a service oriented architecture / microservice environment. It has to be installed per service as a
                    dev requirement. This library will intercept certain calls to the service/application and either execute
                    necessary code for collecting and storing coverage before/after the actual application code or execute it's
                    own actions instead.</p>

                <h4>DO NOT USE IN PRODUCTION!</h4>

                <p>Althought there will be security measures in place, include this library only as a --dev dependency. The
                    intended use is local development or use within a CI/CD pipeline on dedicated integration systems.
                </p>
            </div>
        </div>

        <div class="box box-solid">
            <div class="box-header with-border">
                <i class="fa fa-plug"></i>
                <h3 class="box-title" id="installation">Installation</h3>
            </div>

            <div class="box-body with-border">
                <h4>composer.json:</h4>
                <pre>
{
    "require-dev": {
        "soarce/client": "*"
    }
}</pre>

                <p>or preferably run this composer command in your project root:</p>
                <pre>
$ composer require --dev --prefer-dist "soarce/client"</pre>

                <p>In addition, you will have to install and enable xdebug in order to generate code coverage. It has not been
                    included in the "required" section as it would disallow composer-runs without it.</p>
            </div>
        </div>

        <div class="box box-solid">
            <div class="box-header with-border">
                <i class="fa fa-plug"></i>
                <h3 class="box-title" id="configuration">Configuration</h3>
            </div>

            <div class="box-body with-border">
                <h4>ENV-Variables</h4>
                <ul>
                    <li>string `SOARCE_ACTION_PARAM_NAME` = "SOARCE": names the SOARCE interceptor param name. Use something long and
                        random to obfuscate an active SOARCE client if necessary and/or to solve parameter name conflicts with your
                        application. It has to match the main application's parameter name setting.</li>
                    <li>string `SOARCE_APPLICATION_NAME` = $_SERVER['HOSTNAME']: names the server/application for gathering the stats.
                        This should be the same name used in the main application's config. As a fallback the "HOSTNAME" server variable
                        will be used - with docker this means defaulting to the docker container's id.</li>
                    <li>string `SOARCE_DATA_PATH` = "/tmp/": any writable location on your server / in your container. Named pipes,
                        trigger and pid-files will be written there. If you host multiple services from the same host or container,
                        make sure they use different `SOARCE_DATA_PATH`s. Coverage is sent directly to the master application,
                        trace is written to the named pipes, parsed in memory and the result then sent to the master.</li>
                    <li>string `SOARCE_WHITELISTED_HOST_IPS` = "": a comma-separated list of IPv4 and IPv6 addresses that should be
                        able to access SOARCE commands and resources through this plugin. The empty default means no whitelisting active
                        and permits all requests. This is the default as SOARCE is a development tool and should not be accessible from
                        public networks anyways.</li>
                    <li>string `SOARCE_WHITELISTED_PATHS` = "": a PATH_SEPARATOR (:) separated list of paths out of which SOARCE is
                        allowed to handout sourcecode on request - to display in code coverage views. You should include all possible
                        source code and library paths - a good start is usually the `common_path` parameter in the application's config,
                        for example "/var/www". As with the IP whitelist, an empty path whitelist disables the feature as SOARCE should
                        only be used in closed environments.</li>
                    <li>string `SOARCE_PRESHARED_SECRET` = "": an arbitrary string which - if used - has to be identical to the
                        respective config key in the application's config. It is being sent as a HTTP header to effectively reduce
                        drive-by or XSS attacks as well as brute-force attempts to guess how to access SOARCE on a certain system.</li>
                </ul>
                <h4>X-Debug</h4>
                <pre>
xdebug.auto_trace = 0
xdebug.trace_format = 1
xdebug.trace_enable_trigger = 0</pre>

                <p>This is counterintuitive, but, SOARCE triggers coverage and tracing itself.</p>

                <h4>docker-compose</h4>

                <p>Currently the client expects a few preconditions at static hostnames/addresses - we plan to add configuration options later:</p>
                <ul>
                    <li>the main application will be expected at the address "http://soarce.local:80/"</li>
                    <li>the redis server (for reliable mutex locking of the pipes) at "tcp://soarce.local:6379"</li>
                    <li>clone the application [soarce/application](https://gitlab.home.segnitz.net/soarce/application) and run
                        `docker-compose up` for it, it will create and run the necessary services within a virtual network.</li>
                    <li>make sure that the containers you install this package to can access the aforementioned services. This can be
                        achieved for example by running them with docker-compose and putting them into the same virtual network:
                        <ul>
                            <li>for your application container (e.g. php-fpm or apache + mod_php) add a new network to the current one so it
                                looks for example like this:
                                <pre>
services:
  my-app:
    build: [...]
    volumes: [...]
    links: [...]
    networks:
      default:
        aliases:
          - my-app.local
        soarce_default:</pre>
                            </li>
                            <li>define the network `soarce_default` as an external network by adding this to the end of your docker-compose.yml:
                                <pre>
networks:
  soarce_default:
    external: true</pre>
                            </li>
                        </ul>
                    </li>
                </ul>
            </div>
        </div>

        <div class="box box-solid">
            <div class="box-header with-border">
                <i class="fa fa-plug"></i>
                <h3 class="box-title" id="debug-interface">Debug Interface</h3>
            </div>

            <div class="box-body with-border">
                <p>Just call the index page of your application - e.g. `/` or `/index.php` and add `?SOARCE=index` to the call.</p>
            </div>
        </div>

        <div class="box box-solid">
            <div class="box-header with-border">
                <i class="fa fa-plug"></i>
                <h3 class="box-title" id="known-issues">Known Issues</h3>
            </div>

            <div class="box-body with-border">
                <h4>Security</h4>
                <ul>
                    <li>Currently, nothing prevents anybody from accessing the SOARCE functionality apart from parameter obfuscation,
                        see roadmap for planned countermeasures.</li>
                    <li>Component requires xdebug to be active</li>
                    <li><strong>DO NOT USE IN PRODUCTION!</strong></li>
                </ul>

                <h4>Separating Requests</h4>
                <p>We plan to group requests which are passed on further to subsequent services by the topmost request
                    to the initial application/service - and we'll aim for working them up. This will require passing on
                    request IDs manually through the respective SDKs or adaptors. We'll provide functionality to help with
                    that task.</p>
            </div>
        </div>

    </div>

{% endblock %}
